### Section 2.0: PYXFOIL Practice
#STANDARD IMPORTS
import numpy as np
import os
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import fsolve
import pyxfoil

# calculating the Reynolds number
# Re = (rho*V_inf*c)/mu

#Inputs
foil = ['0012','23012','4412'] #NACA airfoil number
naca = True   #allows NACA number input rather than geometry text file
Re   = [0.00e0, 4.36e5, 1.49e6] #Reynolds Number
alfs = [0, 4, 12] #Angles of Attack to simulated

for i in range(0,len(foil)):
    #read airfoil geometry data from file
        #(this file was created by the above 'pyxfoil.GetPolar' call)
    geom = pyxfoil.ReadXfoilAirfoilGeom('data/naca{0}/naca{0}.dat'.format(foil[i]))
    geomup = np.zeros(int(len(geom['z'])/2)+1)
    geomlow = np.zeros(int(len(geom['z'])/2)+1)
    geomupX = np.zeros(int(len(geom['x'])/2)+1)
    geomlowX = np.zeros(int(len(geom['x'])/2)+1)

    for z in range(0,len(geom['z'])):
        if geom['z'][z] >= 0:
            geomup[z] = geom['z'][z]
            geomupX[z] = geom['x'][z]
        else:
            geomlow[z-len(geomup)+1] = geom['z'][z]
            geomlowX[z-len(geomup)+1] = geom['x'][z]

    foil_name = '{}'.format(foil[i])

    if foil_name[0] == '0': #symmetrical
        camber = (geomup+geomlow)/2
    else:
        geomlow_Corrected = geomlow[::-1]
        camber = (geomup+geomlow_Corrected)/2
    

    #Plot airfoil geometry
        #(NOTE: You must plot airfoil geometry from EQUATION, not file, for points in PJ1)
    print('\nPlotting airfoil geometry from file saved by XFOIL/pyxfoil')
    plt.figure()
    plt.title('airfoil geometry NACA {}'.format(foil[i]))
    plt.plot(geomupX, geomup)
    plt.plot(geomlowX, geomlow)
    plt.plot(geomupX, camber,color='black',linestyle='dashed')
    plt.axis('equal')
    plt.xlabel('x/c')
    plt.ylabel('z/c')
    plt.legend(['Upper','Lower','Camber'])
    plt.show()

    for r in range(0,len(Re)):
        Re_label0 = '{}'.format(Re[r])
        if Re[r] == 0:
            Re_label1 = '0.000'
            E_power = 0
        else:
            Re_label1 = '{}.{}{}{}'.format(Re_label0[0],Re_label0[1],Re_label0[2],Re_label0[3])
            E_power = str(np.log10(Re[r]/float(Re_label1)))[0]

        #Read and print polar data
        pyxfoil.GetPolar(foil[i], naca, alfs, Re[r], SaveCP=True, quiet=True)
        polar = pyxfoil.ReadXfoilPolar('data/naca{0}/naca{0}_polar_Re{1}e+0{2}a0.0-12.0.dat'.format(foil[i],Re_label1[0:4],E_power))
        print('\nPolar for NACA {} at Re={}e{}:'.format(foil[i],Re_label1[0:4],E_power))
        print('------------------------------------------------------------------')
        print(polar)
        print('------------------------------------------------------------------')
        # plt.plot(polar['alpha'], polar['Cl'], label='Re={}e{}:'.format(Re_label1[0:4],E_power))
        
    # plt.xlabel('alpha')
    # plt.ylabel('Cl')
    # plt.legend(['Inviscid','Re = 4.36e5','Re = 1.49e6'])
    # plt.show()